from autocorrect import Speller
import random

# Mock data instead of calling Zomato API
def get_location_details(query):
    # Instead of hitting Zomato, return fake location info
    return 123456, 'city'  # fake entity_id and entity_type

def get_restaurants(ent_id, ent_type):
    # Mock restaurant data similar to Zomato's JSON structure
    return {
        'restaurants': [
            {'restaurant': {
                'name': 'Pizza Palace',
                'location': {'address': '123 Pizza Street, Food Town'},
                'user_rating': {'aggregate_rating': '4.5'},
                'cuisines': 'Italian, Fast Food',
                'url': 'http://mockrestaurant.com/pizzapalace'
            }},
            {'restaurant': {
                'name': 'Spice Symphony',
                'location': {'address': '456 Curry Avenue, Flavor City'},
                'user_rating': {'aggregate_rating': '4.2'},
                'cuisines': 'Indian, Chinese',
                'url': 'http://mockrestaurant.com/spicesymphony'
            }},
            {'restaurant': {
                'name': 'Noodle Nirvana',
                'location': {'address': '789 Ramen Road, Tokyo Town'},
                'user_rating': {'aggregate_rating': '4.8'},
                'cuisines': 'Chinese, Japanese',
                'url': 'http://mockrestaurant.com/noodlenirvana'
            }}
        ]
    }

# Greeting logic
def greeting(sentence):
    greeting_inputs = ("hello", "hi", "greetings", "sup", "what's up", "hey")
    greeting_responses = ["hi", "hey", "*nods*", "hi there", "hello", "I am glad you are talking to me"]
    for word in sentence.split():
        if word.lower() in greeting_inputs:
            return random.choice(greeting_responses)

# Main response logic
def response():
    prompt = '> '
    print('Enter location to search:')
    location = input(prompt)
    print()
    print('Enter cuisines (separated by space):')
    cuisines = input(prompt).split(' ')
    print()

    spell = Speller(lang='en')
    location = spell(location)

    new_cuisines = [spell(cui) for cui in cuisines]

    entity_id, entity_type = get_location_details(location)
    data = get_restaurants(entity_id, entity_type)

    print("Restaurants in " + location.title() + " --\n")

    for restaurant in data['restaurants']:
        r = restaurant['restaurant']
        loc = r['location']
        rating = r['user_rating']
        cuisine = r['cuisines']

        for cui1 in new_cuisines:
            if cui1.lower() in cuisine.lower():
                print(r['name'].upper())
                print("Address - " + loc['address'])
                print("Rating - " + str(rating['aggregate_rating']))
                print("Cuisines - " + cuisine)
                print("More Details - " + r['url'])
                print()
                break

# Main program
if __name__ == "__main__":
    flag = True
    print("My name is foodie. I will suggest you restaurants based on location and cuisines. If you want to exit, type Bye!")
    print("Enter yes for restaurant suggestions!")

    while flag:
        user_response = input().lower()

        if user_response == 'bye' or user_response == 'bye!':
            print("Bye! take care..")
            break

        elif user_response in ('thanks', 'thank you'):
            print("You are welcome! Have a nice day.")
            break

        elif user_response == 'yes':
            response()
            break

        elif greeting(user_response):
            print(greeting(user_response))
        else:
            print("I'm sorry. I don't understand you!")
